// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrow function assignment 1`] = `
"
// sitrep
var cb = x => {
  x = x + 2
  x.charAt(0)
  return x
}

      ↓ ↓ ↓ ↓ ↓ ↓

// sitrep
var cb = function (x) {
  x = x + 2;
  console.log(\\"x\\", x);
  x.charAt(0);
  var _returnValue = x;
  console.log(\\"Return Value:\\", _returnValue);
  return _returnValue;
};
"
`;

exports[`arrow function expression (shorthand arrow fn) 1`] = `
"
// sitrep
var cb = x => x.charAt(0)

      ↓ ↓ ↓ ↓ ↓ ↓

// sitrep
var cb = function (x) {
  var _returnValue = x.charAt(0);

  console.log(\\"Return Value:\\", _returnValue);
  return _returnValue;
};
"
`;

exports[`class methods 1`] = `
"
class Boom {
  // sitrep
  fire() {
    let a = 2
    
    return a + 5
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

class Boom {
  // sitrep
  fire() {
    let a = 2;

    console.log(\\"a\\", a);

    var _returnValue = a + 5;

    console.log(\\"Return Value:\\", _returnValue);
    return _returnValue;
  }
}
"
`;

exports[`function 1`] = `
"
// sitrep
function bar () {
  var a = 'foo'
  const b = 'bar'
  let c = [a, b].map(x => x)
  return c.join('-')
}

      ↓ ↓ ↓ ↓ ↓ ↓

// sitrep
function bar() {
  var a = 'foo';
  console.log('a', a);
  const b = 'bar';
  console.log('b', b);
  let c = [a, b].map(x => x);
  console.log('c', c);

  var _returnValue = c.join('-');

  console.log('Return Value:', _returnValue);
  return _returnValue;
}
"
`;

exports[`function assignment 1`] = `
"
// sitrep
var a = function () {
  return 'foo'
}

      ↓ ↓ ↓ ↓ ↓ ↓

// sitrep
var a = function () {
  var _returnValue = 'foo';
  console.log('Return Value:', _returnValue);

  return _returnValue;
};
"
`;

exports[`object properties 1`] = `
"
const obj = {
  // sitrep
  fn() {
    const { a, b, c = 'foo', d: alias } = x;
    return a + b + c + alias;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

const obj = {
  // sitrep
  fn() {
    const { d: alias, c = 'foo', b, a } = x;
    console.log('a', a);
    console.log('b', b);
    console.log('c', c);
    console.log('alias', alias);

    var _returnValue = a + b + c + alias;

    console.log('Return Value:', _returnValue);
    return _returnValue;
  }
};
"
`;

exports[`should not add console logs 1`] = `
"
function bar () {
  var a = 'foo'
  const b = 'bar'
  let c = [a, b].map(x => x)
  return c.join('-')
}

var cb = x => x.charAt(0)

var cb = x => {
  x = x + 2
  x.charAt(0)
  return x
}

var a = function () {
  return 'foo'
}

const obj = {
  fn() {
    let a = 5
    return a + 5
  }
}

class Boom {
  fire() {
    let a = 2
    
    return a + 5
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

function bar() {
  var a = 'foo';
  const b = 'bar';
  let c = [a, b].map(x => x);
  return c.join('-');
}

var cb = x => x.charAt(0);

var cb = x => {
  x = x + 2;
  x.charAt(0);
  return x;
};

var a = function () {
  return 'foo';
};

const obj = {
  fn() {
    let a = 5;
    return a + 5;
  }
};

class Boom {
  fire() {
    let a = 2;

    return a + 5;
  }
}
"
`;
